#include "pch.h"
#include  "..\..\tabledin\tabledin\tabledin.h"
#include <iostream>
#include <string> 
using namespace Dynamic;

TEST(addMethods, overandconstructsize) {
	Table line;
	ASSERT_EQ(0, line.getSize());
	int n = 2, m = 5;
	int a[] = { 4,5, };
	int b[] = { 4,5 ,4,7,8 };
	char* s[2] = {"Ilyia", "ca"};
	char* h[5] = { "Ilyia","ca" , "loser2","cat3", "found" };

	ASSERT_EQ(0, line.add(3, "info"));
	ASSERT_EQ(0, line.add(3, "info"));
	ASSERT_EQ(0, line.add(3, "info"));
	ASSERT_EQ(0, line.add(3, "info"));
	ASSERT_EQ(0, line.add(3, "info"));
	ASSERT_EQ(0, line.add(3, "info"));
	ASSERT_EQ(0, line.add(3, "1"));
	ASSERT_EQ(0, line.add(3, "2"));
	ASSERT_EQ(0, line.add(3, "3"));
	ASSERT_EQ(0, line.add(3, "4"));
	Table line1(n, a, s);
	ASSERT_EQ(2, line1.getSize());
	ASSERT_EQ(0, line1.add(1, "info"));
	ASSERT_EQ(0, line1.add(2, "info"));
	ASSERT_EQ(0, line1.add(3, "info"));
	ASSERT_EQ(0, line1.add(4, "info"));
	ASSERT_EQ(0, line1.add(5, "info"));

	ASSERT_EQ(0, line1.add(6, "info"));
	ASSERT_EQ(0, line1.add(7, "info"));
	ASSERT_ANY_THROW(line1.add(-1, "info"));
	ASSERT_EQ(0, line1.add(8, "info"));
	ASSERT_EQ(0,line1.add(9, "info"));

	int a1[] = { 4,-1 };
	ASSERT_ANY_THROW(Table line2(n, a1, s));

	int t = 1;
	int key[] = { 1 };
	char* info[10] = { "1234567890000" };
	ASSERT_EQ(0, line1.add(10,info[0]));

}
TEST(findMethods, Parameters)
{
	Table line;
	int n = 2, m = 5;
	int a[] = { 4,5 };
	int b[] = { 4,5 ,4,7,8 };
	char* s[2] = {"Ilyia", "ca"};
	char* h[5] = { "Ilyia","ca" , "loser2","cat3", "found" };


	Table line1(n, a, s);
	
	ASSERT_EQ(0,strcmp("Ilyia", line1.find(4)));
	ASSERT_EQ(0, strcmp("Ilyia", line1.find(4)));

	ASSERT_EQ(0, line1.delet(4, "Ilyia"));



	Table line2(m ,b ,h);
	ASSERT_EQ(1,strcmp("ca", line2.find(4)));
	ASSERT_ANY_THROW( line1.find(-4));
	ASSERT_ANY_THROW(line2.find(-3));
	ASSERT_ANY_THROW(line2.find(-1));
	ASSERT_ANY_THROW(line2.find(-9));


}
TEST(findchooseMethods, Parameters)
{

	Table line;
	int n = 2, m = 5;
	int a[] = { 4,5 };
	int b[] = { 4,5 ,4,7,8 };
	char* s[2] = { "Ilyia", "ca" };
	char* h[5] = { "Ilyia","ca" , "loser2","cat3", "found" };

	Table line1(m, b,h);
	char **S= line1.findchoosing(4, n);
	
	ASSERT_EQ(0, strcmp("Ilyia", S[0]));
	ASSERT_EQ(0, strcmp("loser2", S[1]));
	
	
	ASSERT_EQ(0, line1.delet(4, "Ilyia"));
	char ** g= line1.findchoosing(4, n);
	ASSERT_EQ(0, strcmp("loser2", g[0]));


	ASSERT_EQ(0, line1.delet(4, "loser2"));

	ASSERT_EQ(0, line1.add(3,"info" ));
	ASSERT_EQ(0, line1.add(3, "fount"));
	ASSERT_EQ(0, line1.add(3, "eat"));
	ASSERT_EQ(0, line1.add(3, "busy"));
	ASSERT_EQ(0, line1.add(3, "empty"));



	char** j = line1.findchoosing(5, n);
	ASSERT_EQ(0, strcmp("ca", j[0]));


	char** t = line1.findchoosing(3, n);
	ASSERT_EQ(0, strcmp("info", t[0]));
	ASSERT_EQ(0, strcmp("fount", t[1]));
	ASSERT_EQ(0, strcmp("eat", t[2]));
	ASSERT_EQ(0, strcmp("busy", t[3]));

	ASSERT_ANY_THROW(char** k = line1.findchoosing(-9, n));

	//ASSERT_ANY_THROW(char** l = line1.findchoosing(145, n));








}


TEST(deletMethods, Parameters)
{
	Table line;
	int n = 2, m = 5;
	int a[] = { 4,5 };
	int b[] = { 4,5 ,4,7,8 };
	char* s[2] = { "Ilyia", "ca" };
	char* h[5] = { "Ilyia","ca" , "loser2","cat3", "found" };


	Table line1(n, a, s);
	
	ASSERT_EQ(0, line1.delet(4,"Ilyia"));
	ASSERT_EQ(0, line1.delet(5, "ca"));
	ASSERT_ANY_THROW( line1.delet(-9, "ca"));
	ASSERT_EQ(1,line1.delet(4, "cacgdhdhdhdhdhdhdhdh"));


	Table line2(m, b, h);
	ASSERT_EQ(0, line2.add(3, "info"));
	ASSERT_EQ(0, line2.add(3, "info"));
	ASSERT_EQ(0, line2.add(3, "info"));
	ASSERT_EQ(0, line2.add(3, "info"));
	ASSERT_EQ(0, line2.add(3, "info"));
	ASSERT_EQ(0, line2.delet(4, "Ilyia"));
	ASSERT_EQ(0, line2.add(3, "info"));


	ASSERT_ANY_THROW(line1.delet(-9, "Ilyia"));
}


TEST(Methods, Parameters)
{
	Table line;
	int n = 2, m = 5;
	int a[] = { 4,5 };
	int b[] = { 4,5 ,4,7,8 };
	char* s[2] = { "Ilyia", "ca" };
	char* h[5] = { "Ilyia","ca" , "loser2","cat3", "found" };
	
	

	Table line1(n, a, s);
	Table line2(m, b, h);
	
	ASSERT_EQ(0, line1 == line2);
	Table t;
	Table t1;
	t += line1;
	ASSERT_EQ(1,line1 == t);

	ASSERT_EQ(1, t == (t1 + line1));

	int d = 4;
	int b1[] = { 5 ,4,7,8 };
	char* h1[4] = { "ca" , "loser2","cat3", "found" };
	Table tab(d, b1, h1);
	line1--;
	--line1;
	Table clear;
	ASSERT_EQ(1, clear == line);
	ASSERT_EQ(0, line1 == tab);
	ASSERT_EQ(0, line2 == tab);
	clear = line2;
	ASSERT_EQ(1, clear == line2);
	clear = line1;
	ASSERT_EQ(1, clear == line1);




	
}


TEST(secondMethods, Parameters) {

	Table line;
	int n = 2, m = 5;
	int a[] = { 4,2 };
	int b[] = {3,1};
	char* s[2] = { "Ilyia", "ca" };
	char* h[2] = { "Ilyia","ca"};



	Table line1(n, a, s);
	Table line3(n, b, h);
	Table line2;
	line2=~line1;
	ASSERT_EQ(1, line1 == line1);
	ASSERT_EQ(0, line1 == line2);
	ASSERT_EQ(1, line2 == line3);
	Table lineer;
	line--;
	ASSERT_EQ(1, line == lineer);
	--line;
	ASSERT_EQ(1, line == lineer);
}

TEST(therdMethods, Parameters) {

	Table line;
	int n = 2, m = 5;
	int a[] = { 1,2 };
	int b[] = { 3,1,2,4,5 };
	char* s[2] = { "Ilyia", "ca" }; 
	char* h[5] = { "Ilyia","ca" , "loser2","cat3", "found" };

	Table line1(n, a, s);
	Table line2(m, b, h);
	char* p = nullptr;
	Item i = line1[8];

	ASSERT_EQ(0,strcmp("Ilyia",i.info));

	ASSERT_EQ(2, line1[9].key);
	i = line1[9];
	ASSERT_EQ(0, strcmp("ca", i.info));
	
	i = line2[0];
	ASSERT_EQ(0, strcmp("Ilyia", i.info));
	ASSERT_EQ(-1, line1[3].key);
	i = line2[8];
	ASSERT_EQ(0, strcmp("ca", i.info)); 
	ASSERT_EQ(-1, line1[7].key);
	ASSERT_EQ(1, line2[8].key);
	
	int t = (int)line1;
	ASSERT_EQ(10, t);
	
}
TEST(copymove, Parameters) {

	Table line;
	int n = 2, m = 5;
	int a[] = { 1,2 };
	int b[] = { 3,1,2,4,5 };
	char* s[2] = { "Ilyia", "ca" };
	char* h[5] = { "Ilyia","ca" , "loser2","cat3", "found" };

	Table line1(n, a, s);
	Table line2(m, b, h);
	

	
	Table linecopy(line1);
	ASSERT_EQ(1, linecopy == line1);
	Table linemove(line1 + line2);
	Table line4;
	line4 = line1 + line2;
	ASSERT_EQ(1, line4 == linemove);
	line4 = line1;
	ASSERT_EQ(1, line4 == line1);


	ASSERT_EQ(0, line4 == linemove);
	ASSERT_EQ(1, linecopy == line4);
	Table line5 = line2;
	line4 = line2;
	ASSERT_EQ(1, line5 == line2);
	ASSERT_EQ(1, line4 == line2);
	Table line0;
	line0 += line1;
	ASSERT_EQ(1, line0 == line1);
	line0 += line2;
	ASSERT_EQ(1, line0 == linemove);
	ASSERT_EQ(0, line4 == line1);

}
int main(int argc, char* argv[])
{
	::testing::InitGoogleTest(&argc, argv);
	return RUN_ALL_TESTS();
}
